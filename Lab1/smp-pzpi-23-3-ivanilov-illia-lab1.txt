ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
Кафедра «Програмної інженерії»
 
 




ЗВІТ
з лабораторної роботи № 1
з дисципліни «Скриптові мови програмування»
 



 










Виконав:                                                                                                Перевірив:
ст. гр. ПЗПІ-23-3                                                                			Сокорчук Ігор Петрович
Іванілов І. В.











Харків 2025






1 ІСТОРІЯ ЗМІН
Таблиця 1.1 - Історія змін
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	03.06.2025
	0.1
	Створено основні розділи
	2
	05.06.2025
	0.2
	Додано додаток А - Відеозапис
	

2 ЗАВДАННЯ
– Розробити Bash-скрипт, який обробляє експортований файл із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат Csv для завантаження в Google Календар https://support.google.com/;
– Реалізувати підтримку ключів, а саме: 
* --help – вивести довідку, завершити роботу та повернути успішний результат у батьківський процес;
* --version – вивести інформацію про версію, завершити роботу та повернути успішний результат у батьківський процес;
* -q або --quiet – не виводити інформацію в стандартний потік виведення;
– Реалізувати обробку параметрів і якщо вони не задані – дати можливість обрати користувачу експортований файл та академічну групу за допомогою меню та команди select;
– Для вихідного файлу сформувати структуру відповідно до вимог  Google Календаря, а саме поля: Subject, Start date, Start time, End date, End time, Description;
– Для поля “Subject” видалити назву академічної групи та дефіс;
– Для кожного вида заняття призначити порядковий номер із врахуванням, що лабораторні роботи складаються із двох пар та додати наприкінці поля “Subject”;
– Форматувати дату та час до 12-годинного формату для коректного імпорта в Google Календар;
– Виводити створені дані в стандартний потік виведення, якщо не заблоковано ключем -q / --quiet;
– Записати результат у новий файл із назвою: Google_TimeTable_??_??_20??.csv.
3 ОПИС ВИКОНАНОЇ РОБОТИ
– Реалізовано обробку параметрів командного рядка, а саме: 
* --help – виводить довідку та завершує роботу за допомогою функції show_help();
* --version – виводить номер версії: VERSION=”1.0”;
* -q або --quiet – блокує вивід за допомогою змінної, яка блокує cat результату;
– Скрипт забезпечує вибір файлу, якщо його не вказано як параметр, і тоді виводиться список select з доступних файлів;
– Також забезпечено вибір академічної групи, які знайдені в файлі. Якщо знайдено одну групу – обирається автоматично. Якщо група передана як параметр – перевіряється її наявність у файлі, інакше запускається меню select;
– Для коректного читання файлу треба змінити його кодування на UTF-8, тому було використано -iconv;
– Реалізований скрипт форматує дані у формат Google Календаря, а саме:
* Правильно формує заголовок: Subject, Start date, Start time, End date, End time, Description;
* З поля “Тема” видаляється назва групи та дефіс за допомогою sub(/^.* - /, "", $1);
* Дати форматуються в формат MM/DD/YYYY. Для цього розбили дату по крапках за допомогою split() на три частини і вже потім формують правильний формат;
* Формат часу змінено на 12-годинний за такою логікою: спочатку треба розділити на години та хвилини, визначаємо період (AM/PM) та перетворюємо години;
* Для кожного заняття додається порядковий номер, починаючи з ранішої дати, тому перед цим треба відсортувати дані за датою проведення заняття і вже потім призначити порядковий номер. Якщо це – лабораторне заняття, які йдуть підряд, то вони мають однаковий номер;
* Результат выводится в консоль, якщо це не заблоковано ключем та зберігається в файл, який готовий до імпорту в Google Календар.


4 ВИСНОВКИ
– У результаті виконання лабораторної роботи було створено Bash-скрипт, який автоматизує обробку розкладу занять с CSV-файлу та генерує дані у форматі, готовому для імпорту в Google Календар;
– Отримано навички використання засобів обробки текстових файлів у Bash, зокрема з використанням awk, sed та регулярних виразів для форматування даних;
– Реалізовано програмне забезпечення відповідає поставленим вимогам: воно підтримує фільтрацію за групою, автоматичне визначення номерів занять, конвертацію дати у формат MM/DD/YYYY, а також має механізми сортування і обробки помилок.
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/_y9J3g6bybs
Хронологічний опис відеозапису:
00:00 Представлення
00:50 Тестування скрипту
03:30 Імпорт в Google Calendar
04:15 Пояснення коду
04:36 Функція вибору файлів
04:48 Функція вибору групи
05:57 Пояснення обробки аргументів
07:05 Пояснення скрипту, який форматує файл
09:05 Нумерація занять




ДОДАТОК Б
Графічні матеріали
  

Рисунок Б.1 – Меню вибору файлу
  

Рисунок Б.2 – Меню вибору академічної групи
  

Рисунок Б.3 - Приклад виводу даних в стандартний потік виведення
  

Рисунок Б.4 – Випадок, коли в файлі наявна лише одна група та з ключем -q
ДОДАТОК В
Програмний код
        В. 1 Головний скрипт
GitHub репозиторій: https://github.com/NureIvanilovIllia/smp-pzpi-23-3-ivanilov-illia/blob/main/Lab1/smp-pzpi-23-3-ivanilov-illia-lab1/smp-pzpi-23-3-ivanilov-illia-lab1-code
  1 #!/bin/bash


 2 VERSION="1.0"
 3 QUIET=false


 4 show_help() {
 5     echo "Використання: [--help | --version] | [[-q | --quiet] [академ_група] file.csv]"
 6     echo "  --help       Вивести довідку"
 7     echo "  --version    Вивести інформацію про версію"
 8     echo "  -q, --quiet  Не виводити інформацію в стандартний потік виведення"
 9 }


10 if [[ "$1" == "--help" ]]; then
11     show_help
12     exit 0
13 elif [[ "$1" == "--version" ]]; then
14     echo "Версія $VERSION"
15     exit 0
16 fi


17 choose_csv_file() {
18     echo "Доступні файли розкладу:"
19     select choice in $(ls -t | grep -E '^TimeTable_.._.._20..\.csv') 'Вийти'; do
20         if [ "$choice" = 'Вийти' ]; then
21             exit 0
22         elif [ -n "$choice" ]; then
23             SELECTED_FILE="$choice"
24             echo "$SELECTED_FILE"
25             break
26         else
27             echo "Неправильне значення."
28         fi
29     done
30 }


31 choose_group() {
32     local input_file="$1"
33     groups=($(iconv -f cp1251 -t UTF-8 "$input_file" |
34               sed 's/\r/\n/g' |
35               awk -F' ' '$2 ~ /-/ {gsub(/"/, "", $1); print $1}' |
36               sort -u))


37     if [[ ${#groups[@]} -gt 0 ]]; then
38         echo "Доступні академічні групи розкладу:"
39         select group in "${groups[@]}" "Вийти"; do
40             if [[ "$group" == "Вийти" ]]; then
41                 exit 0
42             elif [[ -n "$group" ]]; then
43                 SELECTED_GROUP="$group"
44                 break
45             else
46                 echo "Неправильне значення."
47             fi
48         done
49     else
50         group_line=$(iconv -f cp1251 -t UTF-8 "$input_file" | sed 's/\r/\n/g' | awk -F',' 'NR==2{print $1}')
51         group_candidates=$(echo "$group_line" | grep -oE 'DL [^"]+' | sed 's/DL //' | tr ',' '\n' | sed 's/^ *//;s/ *$//' | sort -u)


52         if [[ -z "$group_candidates" ]]; then
53             echo "Групи не знайдені в файлі $input_file"
54             exit 1
55         fi


56         mapfile -t groups <<< "$group_candidates"


57         if [[ ${#groups[@]} -eq 1 ]]; then
58             SELECTED_GROUP="${groups[0]}"
59             echo "Автоматично вибрана група: $SELECTED_GROUP"
60         fi
61     fi
62 }




63 if [[ "$1" == "-q" || "$1" == "--quiet" ]]; then
64     QUIET=true
65     shift
66 fi
67 if [[ -n "$2" ]]; then
68     GROUP="$1"
69     INPUT="$2"
70 elif [[ -n "$1" && -f "$1" ]]; then
71     INPUT="$1"
72 else
73     choose_csv_file
74     INPUT="$SELECTED_FILE"
75 fi


76 if [[ ! -f "$INPUT" ]]; then
77     echo "Помилка: Файл '$INPUT' не знайдено або він недоступний" >&2
78     exit 1
79 fi


80 if [[ -z "$GROUP" ]]; then
81     choose_group "$INPUT"
82     GROUP="$SELECTED_GROUP"
83 else
84     group_found=$(iconv -f cp1251 -t UTF-8 "$INPUT" | sed 's/\r/\n/g' | awk -F',' -v g="$GROUP" '$1 ~ g {found=1} END {print found+0}')
85     if [[ "$group_found" -eq 0 ]]; then
86         echo "Групу '$GROUP' не знайдено в файлі '$INPUT'."
87         echo "Виберіть академічну групу:"
88         choose_group "$INPUT"
89         GROUP="$SELECTED_GROUP"
90     fi
91 fi


92 OUTPUT_FILE="Google_$(echo "$INPUT")"


93 echo "Subject,Start date,Start time,End date,End time,Description" > "$OUTPUT_FILE"


94 awk_result=$(cat "$INPUT" \
95     | sed 's/\r/\n/g' | iconv -f cp1251 -t utf-8 \
96     | awk -v GROUP="$GROUP" '
97 BEGIN {
98     FPAT="([^,]*)|(\"[^\"]+\")"
99 }
100 NR == 1 { next }


101 function format_date(d) {
102     split(d, p, ".")
103     return p[2] "/" p[1] "/" p[3]
104 }


105 function format_time(t) {
106     split(t, a, ":")
107     h = a[1] + 0
108     m = a[2] + 0
109     suffix = (h >= 12) ? "PM" : "AM"
110     if (h == 0) h = 12
111     else if (h > 12) h -= 12
112     return sprintf("%d:%02d %s", h, m, suffix)
113 }


114 $1 ~ GROUP {
115     for (i=1; i<=NF; i++) gsub(/^"|"$/, "", $i)
116     sub(/^.* - /, "", $1)
117     subject = $1


118     gsub(/[[:space:]]+/, " ", subject)
119     gsub(/^[[:space:]]+|[[:space:]]+$/, "", subject)


120     split($2, sd, ".")
121     start_date = sd[3] sd[2] sd[1]


122     split($3, st, ":")
123     start_time = sprintf("%02d%02d", st[1], st[2])


124     sortkey = start_date start_time


125     line = subject "|" sortkey "|" $2 "|" $3 "|" $4 "|" $5


126     data[subject][count[subject]++] = line
127 }


128 END {
129     for (s in data) {
130         for (i = 0; i < count[s]; i++) {
131             split(data[s][i], parts, "|")
132             sortkeys[i] = parts[2]
133         }


134         for (i = 0; i < count[s]-1; i++) {
135             for (j = i+1; j < count[s]; j++) {
136                 if (sortkeys[i] > sortkeys[j]) {
137                     tmp = sortkeys[i]; sortkeys[i] = sortkeys[j]; sortkeys[j] = tmp
138                     tmp = data[s][i]; data[s][i] = data[s][j]; data[s][j] = tmp
139                 }
140             }
141         }


142         current_date = ""
143         current_number = 0
144         prev_lab = 0


145         for (i = 0; i < count[s]; i++) {
146             split(data[s][i], parts, "|")
147             subject = s
148             start_date = parts[3]
149             start_time = format_time(parts[4])
150             end_date = parts[5]
151             end_time = format_time(parts[6])


152             is_lab = (subject ~ / Лб /)


153             if (!is_lab) {
154                 current_number++
155                 title = subject "; №" current_number
156             } else {
157                 if (start_date != current_date || !prev_lab) {
158                     current_number++
159                 }
160                 title = subject "; №" current_number
161             }


162             current_date = start_date
163             prev_lab = is_lab


164             print "\"" title "\"," format_date(start_date) "," start_time "," format_date(end_date) "," end_time ",\"" subject "\""
165         }
166     }
167 }
168 ')




169 if [[ -z "$awk_result" ]]; then
170     echo "Помилка: У файлі '$INPUT' не знайдено жодного розкладу для групи '$GROUP'" >&2
171     exit 3
172 fi


173 echo "$awk_result" >> "$OUTPUT_FILE"


174 if ! $QUIET; then
175     echo
176     cat "$OUTPUT_FILE"
177 fi
178 echo "Дані для групи '$GROUP' збережено в файл: $OUTPUT_FILE"
